package com.xuehai.launcher.common.base;

import androidx.annotation.StringRes;
import androidx.lifecycle.MutableLiveData;
import androidx.lifecycle.ViewModel;
import com.xuehai.launcher.common.ext.LiveDataExtKt;
import com.xuehai.launcher.common.ext.SingleLiveEvent;
import com.xuehai.launcher.common.log.MyLog;
import com.xuehai.launcher.common.n.g;
import com.xuehai.launcher.common.widget.dialog.c;
import f.a.i.a;
import g.d0.d.l;
import java.util.Arrays;

public class AbsViewModel extends ViewModel {
  private final SingleLiveEvent<Void> _finish;
  
  private final SingleLiveEvent<String> _progress;
  
  private final SingleLiveEvent<String> _showMessage;
  
  private final SingleLiveEvent<c> _tipDialog;
  
  private final a compositeDisposable = new a();
  
  private final MutableLiveData<Boolean> dataLoading = new MutableLiveData();
  
  private final MutableLiveData<Boolean> dragLoading = new MutableLiveData();
  
  private final SingleLiveEvent<Void> finish;
  
  private final SingleLiveEvent<String> progress;
  
  private final SingleLiveEvent<String> showMessage;
  
  private final SingleLiveEvent<c> tipDialog;
  
  public AbsViewModel() {
    SingleLiveEvent<String> singleLiveEvent = new SingleLiveEvent();
    this._showMessage = singleLiveEvent;
    this.showMessage = singleLiveEvent;
    singleLiveEvent = new SingleLiveEvent();
    this._progress = singleLiveEvent;
    this.progress = singleLiveEvent;
    singleLiveEvent = new SingleLiveEvent();
    this._finish = (SingleLiveEvent)singleLiveEvent;
    this.finish = (SingleLiveEvent)singleLiveEvent;
    singleLiveEvent = new SingleLiveEvent();
    this._tipDialog = (SingleLiveEvent)singleLiveEvent;
    this.tipDialog = (SingleLiveEvent)singleLiveEvent;
  }
  
  public final a getCompositeDisposable() {
    return this.compositeDisposable;
  }
  
  public final MutableLiveData<Boolean> getDataLoading() {
    return this.dataLoading;
  }
  
  public final MutableLiveData<Boolean> getDragLoading() {
    return this.dragLoading;
  }
  
  protected final SingleLiveEvent<Void> getFinish() {
    return this.finish;
  }
  
  protected final SingleLiveEvent<String> getProgress() {
    return this.progress;
  }
  
  protected final SingleLiveEvent<String> getShowMessage() {
    return this.showMessage;
  }
  
  public final String getString(@StringRes int paramInt) {
    String str = BaseApplication.Companion.getInstance().getString(paramInt);
    l.b(str, "BaseApplication.getInstance().getString(stringRes)");
    return str;
  }
  
  public final String getString(@StringRes int paramInt, Object... paramVarArgs) {
    l.c(paramVarArgs, "args");
    String str = BaseApplication.Companion.getInstance().getString(paramInt, Arrays.copyOf(paramVarArgs, paramVarArgs.length));
    l.b(str, "BaseApplication.getInsta*args)");
    return str;
  }
  
  protected final SingleLiveEvent<c> getTipDialog() {
    return this.tipDialog;
  }
  
  public final SingleLiveEvent<Void> get_finish$common_studentRelease() {
    return this._finish;
  }
  
  public final SingleLiveEvent<String> get_progress$common_studentRelease() {
    return this._progress;
  }
  
  public final SingleLiveEvent<String> get_showMessage$common_studentRelease() {
    return this._showMessage;
  }
  
  public final SingleLiveEvent<c> get_tipDialog$common_studentRelease() {
    return this._tipDialog;
  }
  
  public final void hideProgress(long paramLong) {
    if (paramLong > 0L) {
      g.y(new AbsViewModel$hideProgress$1(), paramLong);
      return;
    } 
    LiveDataExtKt.action((MutableLiveData)this.progress);
  }
  
  public boolean isLoading() {
    return (l.a(this.dataLoading.getValue(), Boolean.TRUE) || l.a(this.dragLoading.getValue(), Boolean.TRUE));
  }
  
  protected void onCleared() {
    super.onCleared();
    this.compositeDisposable.dispose();
  }
  
  public final void showProgress(@StringRes int paramInt) {
    showProgress(getString(paramInt));
  }
  
  public final void showProgress(String paramString) {
    l.c(paramString, "string");
    LiveDataExtKt.set((MutableLiveData)this.progress, paramString);
  }
  
  public final void toastMessage(String paramString) {
    l.c(paramString, "message");
    LiveDataExtKt.set((MutableLiveData)this.showMessage, paramString);
    MyLog.i("Debug[MDM]", paramString);
  }
  
  static final class AbsViewModel$hideProgress$1 implements Runnable {
    public final void run() {
      AbsViewModel.this.getProgress().setValue(null);
    }
  }
}
